# Generated from /home/hell/projects/ZCODE-programming-language/src/main/zcode/parser/ZCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,47,377,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,1,0,1,0,1,0,
        1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,5,
        1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,
        1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,
        12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,
        17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,
        20,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,23,1,23,1,24,1,
        24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,
        30,1,30,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,
        34,1,35,1,35,1,35,1,36,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,
        37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,257,8,
        37,1,38,1,38,5,38,261,8,38,10,38,12,38,264,9,38,1,39,1,39,3,39,268,
        8,39,1,39,3,39,271,8,39,1,40,4,40,274,8,40,11,40,12,40,275,1,41,
        1,41,5,41,280,8,41,10,41,12,41,283,9,41,1,42,1,42,3,42,287,8,42,
        1,42,4,42,290,8,42,11,42,12,42,291,1,43,1,43,1,43,1,43,5,43,298,
        8,43,10,43,12,43,301,9,43,1,43,4,43,304,8,43,11,43,12,43,305,1,43,
        1,43,1,43,5,43,311,8,43,10,43,12,43,314,9,43,1,43,1,43,1,43,1,44,
        1,44,1,44,1,44,5,44,323,8,44,10,44,12,44,326,9,44,1,44,1,44,3,44,
        330,8,44,1,44,1,44,1,45,1,45,1,45,1,45,5,45,338,8,45,10,45,12,45,
        341,9,45,1,45,1,45,1,46,1,46,1,46,1,47,1,47,1,47,1,47,5,47,352,8,
        47,10,47,12,47,355,9,47,1,47,1,47,3,47,359,8,47,1,47,1,47,1,48,4,
        48,364,8,48,11,48,12,48,365,1,48,1,48,1,49,3,49,371,8,49,1,49,1,
        49,1,50,1,50,1,50,2,324,353,0,51,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
        19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
        30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,
        0,83,0,85,0,87,41,89,42,91,43,93,0,95,44,97,45,99,46,101,47,1,0,
        8,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,
        2,0,43,43,45,45,1,0,34,34,2,0,10,10,34,34,7,0,39,39,92,92,98,98,
        102,102,110,110,114,114,116,116,3,0,9,9,12,12,32,32,395,0,1,1,0,
        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
        0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
        0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
        0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
        0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,
        0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,
        0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,87,1,0,0,0,
        0,89,1,0,0,0,0,91,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,
        0,101,1,0,0,0,1,103,1,0,0,0,3,109,1,0,0,0,5,115,1,0,0,0,7,124,1,
        0,0,0,9,131,1,0,0,0,11,134,1,0,0,0,13,139,1,0,0,0,15,144,1,0,0,0,
        17,148,1,0,0,0,19,154,1,0,0,0,21,157,1,0,0,0,23,163,1,0,0,0,25,167,
        1,0,0,0,27,172,1,0,0,0,29,174,1,0,0,0,31,176,1,0,0,0,33,178,1,0,
        0,0,35,180,1,0,0,0,37,182,1,0,0,0,39,185,1,0,0,0,41,189,1,0,0,0,
        43,197,1,0,0,0,45,199,1,0,0,0,47,203,1,0,0,0,49,205,1,0,0,0,51,207,
        1,0,0,0,53,209,1,0,0,0,55,211,1,0,0,0,57,213,1,0,0,0,59,216,1,0,
        0,0,61,219,1,0,0,0,63,221,1,0,0,0,65,223,1,0,0,0,67,226,1,0,0,0,
        69,229,1,0,0,0,71,233,1,0,0,0,73,236,1,0,0,0,75,256,1,0,0,0,77,258,
        1,0,0,0,79,265,1,0,0,0,81,273,1,0,0,0,83,277,1,0,0,0,85,284,1,0,
        0,0,87,293,1,0,0,0,89,318,1,0,0,0,91,333,1,0,0,0,93,344,1,0,0,0,
        95,347,1,0,0,0,97,363,1,0,0,0,99,370,1,0,0,0,101,374,1,0,0,0,103,
        104,5,112,0,0,104,105,5,114,0,0,105,106,5,105,0,0,106,107,5,110,
        0,0,107,108,5,116,0,0,108,2,1,0,0,0,109,110,5,98,0,0,110,111,5,114,
        0,0,111,112,5,101,0,0,112,113,5,97,0,0,113,114,5,107,0,0,114,4,1,
        0,0,0,115,116,5,99,0,0,116,117,5,111,0,0,117,118,5,110,0,0,118,119,
        5,116,0,0,119,120,5,105,0,0,120,121,5,110,0,0,121,122,5,117,0,0,
        122,123,5,101,0,0,123,6,1,0,0,0,124,125,5,114,0,0,125,126,5,101,
        0,0,126,127,5,116,0,0,127,128,5,117,0,0,128,129,5,114,0,0,129,130,
        5,110,0,0,130,8,1,0,0,0,131,132,5,105,0,0,132,133,5,102,0,0,133,
        10,1,0,0,0,134,135,5,101,0,0,135,136,5,108,0,0,136,137,5,105,0,0,
        137,138,5,102,0,0,138,12,1,0,0,0,139,140,5,101,0,0,140,141,5,108,
        0,0,141,142,5,115,0,0,142,143,5,101,0,0,143,14,1,0,0,0,144,145,5,
        102,0,0,145,146,5,111,0,0,146,147,5,114,0,0,147,16,1,0,0,0,148,149,
        5,117,0,0,149,150,5,110,0,0,150,151,5,116,0,0,151,152,5,105,0,0,
        152,153,5,108,0,0,153,18,1,0,0,0,154,155,5,98,0,0,155,156,5,121,
        0,0,156,20,1,0,0,0,157,158,5,98,0,0,158,159,5,101,0,0,159,160,5,
        103,0,0,160,161,5,105,0,0,161,162,5,110,0,0,162,22,1,0,0,0,163,164,
        5,101,0,0,164,165,5,110,0,0,165,166,5,100,0,0,166,24,1,0,0,0,167,
        168,5,102,0,0,168,169,5,117,0,0,169,170,5,110,0,0,170,171,5,99,0,
        0,171,26,1,0,0,0,172,173,5,40,0,0,173,28,1,0,0,0,174,175,5,44,0,
        0,175,30,1,0,0,0,176,177,5,41,0,0,177,32,1,0,0,0,178,179,5,91,0,
        0,179,34,1,0,0,0,180,181,5,93,0,0,181,36,1,0,0,0,182,183,5,60,0,
        0,183,184,5,45,0,0,184,38,1,0,0,0,185,186,5,118,0,0,186,187,5,97,
        0,0,187,188,5,114,0,0,188,40,1,0,0,0,189,190,5,100,0,0,190,191,5,
        121,0,0,191,192,5,110,0,0,192,193,5,97,0,0,193,194,5,109,0,0,194,
        195,5,105,0,0,195,196,5,99,0,0,196,42,1,0,0,0,197,198,5,45,0,0,198,
        44,1,0,0,0,199,200,5,110,0,0,200,201,5,111,0,0,201,202,5,116,0,0,
        202,46,1,0,0,0,203,204,5,42,0,0,204,48,1,0,0,0,205,206,5,47,0,0,
        206,50,1,0,0,0,207,208,5,37,0,0,208,52,1,0,0,0,209,210,5,43,0,0,
        210,54,1,0,0,0,211,212,5,61,0,0,212,56,1,0,0,0,213,214,5,61,0,0,
        214,215,5,61,0,0,215,58,1,0,0,0,216,217,5,33,0,0,217,218,5,61,0,
        0,218,60,1,0,0,0,219,220,5,60,0,0,220,62,1,0,0,0,221,222,5,62,0,
        0,222,64,1,0,0,0,223,224,5,60,0,0,224,225,5,61,0,0,225,66,1,0,0,
        0,226,227,5,62,0,0,227,228,5,61,0,0,228,68,1,0,0,0,229,230,5,97,
        0,0,230,231,5,110,0,0,231,232,5,100,0,0,232,70,1,0,0,0,233,234,5,
        111,0,0,234,235,5,114,0,0,235,72,1,0,0,0,236,237,5,46,0,0,237,238,
        5,46,0,0,238,239,5,46,0,0,239,74,1,0,0,0,240,241,5,110,0,0,241,242,
        5,117,0,0,242,243,5,109,0,0,243,244,5,98,0,0,244,245,5,101,0,0,245,
        257,5,114,0,0,246,247,5,115,0,0,247,248,5,116,0,0,248,249,5,114,
        0,0,249,250,5,105,0,0,250,251,5,110,0,0,251,257,5,103,0,0,252,253,
        5,98,0,0,253,254,5,111,0,0,254,255,5,111,0,0,255,257,5,108,0,0,256,
        240,1,0,0,0,256,246,1,0,0,0,256,252,1,0,0,0,257,76,1,0,0,0,258,262,
        7,0,0,0,259,261,7,1,0,0,260,259,1,0,0,0,261,264,1,0,0,0,262,260,
        1,0,0,0,262,263,1,0,0,0,263,78,1,0,0,0,264,262,1,0,0,0,265,267,3,
        81,40,0,266,268,3,83,41,0,267,266,1,0,0,0,267,268,1,0,0,0,268,270,
        1,0,0,0,269,271,3,85,42,0,270,269,1,0,0,0,270,271,1,0,0,0,271,80,
        1,0,0,0,272,274,7,2,0,0,273,272,1,0,0,0,274,275,1,0,0,0,275,273,
        1,0,0,0,275,276,1,0,0,0,276,82,1,0,0,0,277,281,5,46,0,0,278,280,
        7,2,0,0,279,278,1,0,0,0,280,283,1,0,0,0,281,279,1,0,0,0,281,282,
        1,0,0,0,282,84,1,0,0,0,283,281,1,0,0,0,284,286,5,101,0,0,285,287,
        7,3,0,0,286,285,1,0,0,0,286,287,1,0,0,0,287,289,1,0,0,0,288,290,
        7,2,0,0,289,288,1,0,0,0,290,291,1,0,0,0,291,289,1,0,0,0,291,292,
        1,0,0,0,292,86,1,0,0,0,293,299,5,34,0,0,294,298,8,4,0,0,295,296,
        5,39,0,0,296,298,5,34,0,0,297,294,1,0,0,0,297,295,1,0,0,0,298,301,
        1,0,0,0,299,297,1,0,0,0,299,300,1,0,0,0,300,303,1,0,0,0,301,299,
        1,0,0,0,302,304,3,93,46,0,303,302,1,0,0,0,304,305,1,0,0,0,305,303,
        1,0,0,0,305,306,1,0,0,0,306,312,1,0,0,0,307,311,8,4,0,0,308,309,
        5,39,0,0,309,311,5,34,0,0,310,307,1,0,0,0,310,308,1,0,0,0,311,314,
        1,0,0,0,312,310,1,0,0,0,312,313,1,0,0,0,313,315,1,0,0,0,314,312,
        1,0,0,0,315,316,5,34,0,0,316,317,6,43,0,0,317,88,1,0,0,0,318,324,
        5,34,0,0,319,323,8,4,0,0,320,321,5,39,0,0,321,323,5,34,0,0,322,319,
        1,0,0,0,322,320,1,0,0,0,323,326,1,0,0,0,324,325,1,0,0,0,324,322,
        1,0,0,0,325,329,1,0,0,0,326,324,1,0,0,0,327,330,3,99,49,0,328,330,
        5,0,0,1,329,327,1,0,0,0,329,328,1,0,0,0,330,331,1,0,0,0,331,332,
        6,44,1,0,332,90,1,0,0,0,333,339,5,34,0,0,334,338,8,5,0,0,335,336,
        5,39,0,0,336,338,5,34,0,0,337,334,1,0,0,0,337,335,1,0,0,0,338,341,
        1,0,0,0,339,337,1,0,0,0,339,340,1,0,0,0,340,342,1,0,0,0,341,339,
        1,0,0,0,342,343,5,34,0,0,343,92,1,0,0,0,344,345,5,92,0,0,345,346,
        8,6,0,0,346,94,1,0,0,0,347,348,5,35,0,0,348,349,5,35,0,0,349,353,
        1,0,0,0,350,352,9,0,0,0,351,350,1,0,0,0,352,355,1,0,0,0,353,354,
        1,0,0,0,353,351,1,0,0,0,354,358,1,0,0,0,355,353,1,0,0,0,356,359,
        3,99,49,0,357,359,5,0,0,1,358,356,1,0,0,0,358,357,1,0,0,0,359,360,
        1,0,0,0,360,361,6,47,2,0,361,96,1,0,0,0,362,364,7,7,0,0,363,362,
        1,0,0,0,364,365,1,0,0,0,365,363,1,0,0,0,365,366,1,0,0,0,366,367,
        1,0,0,0,367,368,6,48,3,0,368,98,1,0,0,0,369,371,5,13,0,0,370,369,
        1,0,0,0,370,371,1,0,0,0,371,372,1,0,0,0,372,373,5,10,0,0,373,100,
        1,0,0,0,374,375,9,0,0,0,375,376,6,50,4,0,376,102,1,0,0,0,23,0,256,
        262,267,270,275,281,286,291,297,299,305,310,312,322,324,329,337,
        339,353,358,365,370,5,1,43,0,1,44,1,1,47,2,6,0,0,1,50,3
    ]

class ZCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    TYPE = 38
    IDENTIFIER = 39
    NUMBER = 40
    ILLEGAL_ESCAPE = 41
    UNCLOSE_STRING = 42
    STRING = 43
    COMMENT = 44
    WS = 45
    NEWLINE = 46
    ERROR_CHAR = 47

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'print'", "'break'", "'continue'", "'return'", "'if'", "'elif'", 
            "'else'", "'for'", "'until'", "'by'", "'begin'", "'end'", "'func'", 
            "'('", "','", "')'", "'['", "']'", "'<-'", "'var'", "'dynamic'", 
            "'-'", "'not'", "'*'", "'/'", "'%'", "'+'", "'='", "'=='", "'!='", 
            "'<'", "'>'", "'<='", "'>='", "'and'", "'or'", "'...'" ]

    symbolicNames = [ "<INVALID>",
            "TYPE", "IDENTIFIER", "NUMBER", "ILLEGAL_ESCAPE", "UNCLOSE_STRING", 
            "STRING", "COMMENT", "WS", "NEWLINE", "ERROR_CHAR" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "TYPE", "IDENTIFIER", 
                  "NUMBER", "INTEGRAL", "DECIMAL", "EXPONENT", "ILLEGAL_ESCAPE", 
                  "UNCLOSE_STRING", "STRING", "INVALID_ESCAPED_SEQUENCE", 
                  "COMMENT", "WS", "NEWLINE", "ERROR_CHAR" ]

    grammarFileName = "ZCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None





    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[43] = self.ILLEGAL_ESCAPE_action 
            actions[44] = self.UNCLOSE_STRING_action 
            actions[47] = self.COMMENT_action 
            actions[50] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            raise IllegalEscape(self.text)
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            raise UncloseString(self.text)
     

    def COMMENT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
             self.text = self.text.rstrip() 
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            raise ErrorToken(self.text)
     


