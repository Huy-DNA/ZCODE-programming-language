# Generated from /home/hell/projects/ZCODE-programming-language/src/main/zcode/parser/ZCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,46,361,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,1,0,1,0,1,0,1,0,1,0,1,
        0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,
        7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,11,
        1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
        1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,
        1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,
        1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,
        1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,32,
        1,32,1,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,35,1,35,1,35,
        1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
        1,36,1,36,1,36,3,36,249,8,36,1,37,1,37,5,37,253,8,37,10,37,12,37,
        256,9,37,1,38,1,38,3,38,260,8,38,1,38,3,38,263,8,38,1,39,4,39,266,
        8,39,11,39,12,39,267,1,40,1,40,5,40,272,8,40,10,40,12,40,275,9,40,
        1,41,1,41,3,41,279,8,41,1,41,4,41,282,8,41,11,41,12,41,283,1,42,
        1,42,1,42,1,42,5,42,290,8,42,10,42,12,42,293,9,42,1,42,4,42,296,
        8,42,11,42,12,42,297,1,42,1,42,1,42,5,42,303,8,42,10,42,12,42,306,
        9,42,1,42,1,42,1,43,1,43,1,43,1,43,5,43,314,8,43,10,43,12,43,317,
        9,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,5,44,326,8,44,10,44,12,44,
        329,9,44,1,44,1,44,1,45,1,45,1,45,1,46,1,46,1,46,1,46,5,46,340,8,
        46,10,46,12,46,343,9,46,1,46,1,46,1,47,4,47,348,8,47,11,47,12,47,
        349,1,47,1,47,1,48,3,48,355,8,48,1,48,1,48,1,49,1,49,1,49,2,315,
        341,0,50,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
        23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
        34,69,35,71,36,73,37,75,38,77,39,79,0,81,0,83,0,85,40,87,41,89,42,
        91,0,93,43,95,44,97,45,99,46,1,0,8,1,0,97,122,2,0,48,57,97,122,1,
        0,48,57,2,0,43,43,45,45,1,0,34,34,2,0,10,10,34,34,7,0,39,39,92,92,
        98,98,102,102,110,110,114,114,116,116,3,0,9,9,12,12,32,32,377,0,
        1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
        0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
        0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
        0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
        0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,
        0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,
        0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,
        0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,85,1,0,0,0,0,87,1,
        0,0,0,0,89,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,
        0,0,0,1,101,1,0,0,0,3,107,1,0,0,0,5,116,1,0,0,0,7,123,1,0,0,0,9,
        126,1,0,0,0,11,128,1,0,0,0,13,130,1,0,0,0,15,135,1,0,0,0,17,140,
        1,0,0,0,19,144,1,0,0,0,21,150,1,0,0,0,23,153,1,0,0,0,25,159,1,0,
        0,0,27,163,1,0,0,0,29,168,1,0,0,0,31,170,1,0,0,0,33,172,1,0,0,0,
        35,174,1,0,0,0,37,177,1,0,0,0,39,181,1,0,0,0,41,189,1,0,0,0,43,191,
        1,0,0,0,45,195,1,0,0,0,47,197,1,0,0,0,49,199,1,0,0,0,51,201,1,0,
        0,0,53,203,1,0,0,0,55,205,1,0,0,0,57,208,1,0,0,0,59,211,1,0,0,0,
        61,213,1,0,0,0,63,215,1,0,0,0,65,218,1,0,0,0,67,221,1,0,0,0,69,225,
        1,0,0,0,71,229,1,0,0,0,73,248,1,0,0,0,75,250,1,0,0,0,77,257,1,0,
        0,0,79,265,1,0,0,0,81,269,1,0,0,0,83,276,1,0,0,0,85,285,1,0,0,0,
        87,309,1,0,0,0,89,321,1,0,0,0,91,332,1,0,0,0,93,335,1,0,0,0,95,347,
        1,0,0,0,97,354,1,0,0,0,99,358,1,0,0,0,101,102,5,98,0,0,102,103,5,
        114,0,0,103,104,5,101,0,0,104,105,5,97,0,0,105,106,5,107,0,0,106,
        2,1,0,0,0,107,108,5,99,0,0,108,109,5,111,0,0,109,110,5,110,0,0,110,
        111,5,116,0,0,111,112,5,105,0,0,112,113,5,110,0,0,113,114,5,117,
        0,0,114,115,5,101,0,0,115,4,1,0,0,0,116,117,5,114,0,0,117,118,5,
        101,0,0,118,119,5,116,0,0,119,120,5,117,0,0,120,121,5,114,0,0,121,
        122,5,110,0,0,122,6,1,0,0,0,123,124,5,105,0,0,124,125,5,102,0,0,
        125,8,1,0,0,0,126,127,5,40,0,0,127,10,1,0,0,0,128,129,5,41,0,0,129,
        12,1,0,0,0,130,131,5,101,0,0,131,132,5,108,0,0,132,133,5,105,0,0,
        133,134,5,102,0,0,134,14,1,0,0,0,135,136,5,101,0,0,136,137,5,108,
        0,0,137,138,5,115,0,0,138,139,5,101,0,0,139,16,1,0,0,0,140,141,5,
        102,0,0,141,142,5,111,0,0,142,143,5,114,0,0,143,18,1,0,0,0,144,145,
        5,117,0,0,145,146,5,110,0,0,146,147,5,116,0,0,147,148,5,105,0,0,
        148,149,5,108,0,0,149,20,1,0,0,0,150,151,5,98,0,0,151,152,5,121,
        0,0,152,22,1,0,0,0,153,154,5,98,0,0,154,155,5,101,0,0,155,156,5,
        103,0,0,156,157,5,105,0,0,157,158,5,110,0,0,158,24,1,0,0,0,159,160,
        5,101,0,0,160,161,5,110,0,0,161,162,5,100,0,0,162,26,1,0,0,0,163,
        164,5,102,0,0,164,165,5,117,0,0,165,166,5,110,0,0,166,167,5,99,0,
        0,167,28,1,0,0,0,168,169,5,44,0,0,169,30,1,0,0,0,170,171,5,91,0,
        0,171,32,1,0,0,0,172,173,5,93,0,0,173,34,1,0,0,0,174,175,5,60,0,
        0,175,176,5,45,0,0,176,36,1,0,0,0,177,178,5,118,0,0,178,179,5,97,
        0,0,179,180,5,114,0,0,180,38,1,0,0,0,181,182,5,100,0,0,182,183,5,
        121,0,0,183,184,5,110,0,0,184,185,5,97,0,0,185,186,5,109,0,0,186,
        187,5,105,0,0,187,188,5,99,0,0,188,40,1,0,0,0,189,190,5,45,0,0,190,
        42,1,0,0,0,191,192,5,110,0,0,192,193,5,111,0,0,193,194,5,116,0,0,
        194,44,1,0,0,0,195,196,5,42,0,0,196,46,1,0,0,0,197,198,5,47,0,0,
        198,48,1,0,0,0,199,200,5,37,0,0,200,50,1,0,0,0,201,202,5,43,0,0,
        202,52,1,0,0,0,203,204,5,61,0,0,204,54,1,0,0,0,205,206,5,61,0,0,
        206,207,5,61,0,0,207,56,1,0,0,0,208,209,5,33,0,0,209,210,5,61,0,
        0,210,58,1,0,0,0,211,212,5,60,0,0,212,60,1,0,0,0,213,214,5,62,0,
        0,214,62,1,0,0,0,215,216,5,60,0,0,216,217,5,61,0,0,217,64,1,0,0,
        0,218,219,5,62,0,0,219,220,5,61,0,0,220,66,1,0,0,0,221,222,5,46,
        0,0,222,223,5,46,0,0,223,224,5,46,0,0,224,68,1,0,0,0,225,226,5,97,
        0,0,226,227,5,110,0,0,227,228,5,100,0,0,228,70,1,0,0,0,229,230,5,
        111,0,0,230,231,5,114,0,0,231,72,1,0,0,0,232,233,5,110,0,0,233,234,
        5,117,0,0,234,235,5,109,0,0,235,236,5,98,0,0,236,237,5,101,0,0,237,
        249,5,114,0,0,238,239,5,115,0,0,239,240,5,116,0,0,240,241,5,114,
        0,0,241,242,5,105,0,0,242,243,5,110,0,0,243,249,5,103,0,0,244,245,
        5,98,0,0,245,246,5,111,0,0,246,247,5,111,0,0,247,249,5,108,0,0,248,
        232,1,0,0,0,248,238,1,0,0,0,248,244,1,0,0,0,249,74,1,0,0,0,250,254,
        7,0,0,0,251,253,7,1,0,0,252,251,1,0,0,0,253,256,1,0,0,0,254,252,
        1,0,0,0,254,255,1,0,0,0,255,76,1,0,0,0,256,254,1,0,0,0,257,259,3,
        79,39,0,258,260,3,81,40,0,259,258,1,0,0,0,259,260,1,0,0,0,260,262,
        1,0,0,0,261,263,3,83,41,0,262,261,1,0,0,0,262,263,1,0,0,0,263,78,
        1,0,0,0,264,266,7,2,0,0,265,264,1,0,0,0,266,267,1,0,0,0,267,265,
        1,0,0,0,267,268,1,0,0,0,268,80,1,0,0,0,269,273,5,46,0,0,270,272,
        7,2,0,0,271,270,1,0,0,0,272,275,1,0,0,0,273,271,1,0,0,0,273,274,
        1,0,0,0,274,82,1,0,0,0,275,273,1,0,0,0,276,278,5,101,0,0,277,279,
        7,3,0,0,278,277,1,0,0,0,278,279,1,0,0,0,279,281,1,0,0,0,280,282,
        7,2,0,0,281,280,1,0,0,0,282,283,1,0,0,0,283,281,1,0,0,0,283,284,
        1,0,0,0,284,84,1,0,0,0,285,291,5,34,0,0,286,290,8,4,0,0,287,288,
        5,39,0,0,288,290,5,34,0,0,289,286,1,0,0,0,289,287,1,0,0,0,290,293,
        1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,295,1,0,0,0,293,291,
        1,0,0,0,294,296,3,91,45,0,295,294,1,0,0,0,296,297,1,0,0,0,297,295,
        1,0,0,0,297,298,1,0,0,0,298,304,1,0,0,0,299,303,8,4,0,0,300,301,
        5,39,0,0,301,303,5,34,0,0,302,299,1,0,0,0,302,300,1,0,0,0,303,306,
        1,0,0,0,304,302,1,0,0,0,304,305,1,0,0,0,305,307,1,0,0,0,306,304,
        1,0,0,0,307,308,5,34,0,0,308,86,1,0,0,0,309,315,5,34,0,0,310,314,
        8,4,0,0,311,312,5,39,0,0,312,314,5,34,0,0,313,310,1,0,0,0,313,311,
        1,0,0,0,314,317,1,0,0,0,315,316,1,0,0,0,315,313,1,0,0,0,316,318,
        1,0,0,0,317,315,1,0,0,0,318,319,3,97,48,0,319,320,6,43,0,0,320,88,
        1,0,0,0,321,327,5,34,0,0,322,326,8,5,0,0,323,324,5,39,0,0,324,326,
        5,34,0,0,325,322,1,0,0,0,325,323,1,0,0,0,326,329,1,0,0,0,327,325,
        1,0,0,0,327,328,1,0,0,0,328,330,1,0,0,0,329,327,1,0,0,0,330,331,
        5,34,0,0,331,90,1,0,0,0,332,333,5,92,0,0,333,334,8,6,0,0,334,92,
        1,0,0,0,335,336,5,35,0,0,336,337,5,35,0,0,337,341,1,0,0,0,338,340,
        9,0,0,0,339,338,1,0,0,0,340,343,1,0,0,0,341,342,1,0,0,0,341,339,
        1,0,0,0,342,344,1,0,0,0,343,341,1,0,0,0,344,345,3,97,48,0,345,94,
        1,0,0,0,346,348,7,7,0,0,347,346,1,0,0,0,348,349,1,0,0,0,349,347,
        1,0,0,0,349,350,1,0,0,0,350,351,1,0,0,0,351,352,6,47,1,0,352,96,
        1,0,0,0,353,355,5,13,0,0,354,353,1,0,0,0,354,355,1,0,0,0,355,356,
        1,0,0,0,356,357,5,10,0,0,357,98,1,0,0,0,358,359,9,0,0,0,359,360,
        6,49,2,0,360,100,1,0,0,0,21,0,248,254,259,262,267,273,278,283,289,
        291,297,302,304,313,315,325,327,341,349,354,3,1,43,0,6,0,0,1,49,
        1
    ]

class ZCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    TYPE = 37
    IDENTIFIER = 38
    NUMBER = 39
    ILLEGAL_ESCAPE = 40
    UNCLOSE_STRING = 41
    STRING = 42
    COMMENT = 43
    WS = 44
    NEWLINE = 45
    ERROR_CHAR = 46

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'break'", "'continue'", "'return'", "'if'", "'('", "')'", "'elif'", 
            "'else'", "'for'", "'until'", "'by'", "'begin'", "'end'", "'func'", 
            "','", "'['", "']'", "'<-'", "'var'", "'dynamic'", "'-'", "'not'", 
            "'*'", "'/'", "'%'", "'+'", "'='", "'=='", "'!='", "'<'", "'>'", 
            "'<='", "'>='", "'...'", "'and'", "'or'" ]

    symbolicNames = [ "<INVALID>",
            "TYPE", "IDENTIFIER", "NUMBER", "ILLEGAL_ESCAPE", "UNCLOSE_STRING", 
            "STRING", "COMMENT", "WS", "NEWLINE", "ERROR_CHAR" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "TYPE", "IDENTIFIER", 
                  "NUMBER", "INTEGRAL", "DECIMAL", "EXPONENT", "ILLEGAL_ESCAPE", 
                  "UNCLOSE_STRING", "STRING", "INVALID_ESCAPED_SEQUENCE", 
                  "COMMENT", "WS", "NEWLINE", "ERROR_CHAR" ]

    grammarFileName = "ZCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None





    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[43] = self.UNCLOSE_STRING_action 
            actions[49] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            raise UncloseString(self.text)
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            raise ErrorToken(self.text)
     


